abstract class Twin() end

/**
 *  Models a physical plant. It is initially retrieved by
 *  the asset model, but it can be reconfigured by the program model.
 *  Each plant is associated with a pot.
 */
class Plant extends Twin (String plantId, Double idealMoisture, Double moisture, String healthState, String status)

    Double getPotMoisture()
        String id = this.plantId ++ ".0";
        Double moisture = -1.0;
        List<Double> influxReturn = access(
            "from(bucket: \"GreenHouse\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:pot\")
                |> filter(fn: (r) => r[\"_field\"] == \"moisture\")
                |> filter(fn: (r) => r[\"plant_id\"] == \"%1\")
                |> keep(columns: [\"_value\"])
                |> last()",
            INFLUXDB("config_local.yml"),
            id);

        if influxReturn != null then
            moisture = influxReturn.content;
        end

        return moisture;
    end


// NDVI START
    Double getNdvi()
    String id = this.plantId ++ ".0";
        Double healthState = 0.0;
        List<Double> influxReturn = access(
            "from(bucket: \"GreenHouse\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:plant\")
                |> filter(fn: (r) => r[\"_field\"] == \"ndvi\")
                |> filter(fn: (r) => r[\"plant_id\"] == \"%1\")
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        id);

        if influxReturn != null then
            healthState = influxReturn.content;
        end

        return healthState;
    end
// NDVI END
end


/* Models a physical pot. It is initially retrieved by the asset model. Each pot is associated with a moisture sensor. */
class Pot extends Twin (String id, String shelfFloor, String potPosition, String pumpId, String plantId) end


/** The following classes represent instances of assets that we currently not using directly but that are twinned for possible extensions */
/* Models a physical shelf. It is initially retrieved by the asset model. */
class Shelf extends Twin (String shelfFloor) end

/*  Models a physical pump. It is initially retrieved by the asset model. */
class Pump extends Twin (
    Int pumpGpioPin,
    String pumpId,
    domain String modelName,
    hidden String modelNameOut,
    domain Int pumpLifeTime,
    hidden Int pumpLifeTimeOut,
    domain Double temperature, 
    hidden Double temperatureOut)
models "a ast:Pump ; domain:temperature %temperature ; domain:pumpLifeTime %pumpLifeTime ; domain:modelName %modelName";
end

class OperatingPump extends Pump ()
classifies "<ast:Operational>";
    Unit printInfo()
        print("Pump: " ++ this.pumpId ++ " is operational.");
    end
end

class MaintenancePump extends Pump (Int powerOutput)
classifies "<ast:Maintenance>";
retrieves "SELECT DISTINCT ?powerOutput WHERE {
  %this a prog:Pump ;
    domain:models ?x .
  ?x domain:modelName ?modelName .
  ?pump a ast:Maintenance ;
    ast:powerOutput ?powerOutput ;
    ast:modelName ?model .
  FILTER (?model = ?modelName) .
}";
    Unit printInfo()
        print("Pump: " ++ this.pumpId ++ " is in maintenance. Set power to " ++ this.powerOutput ++ ".");
    end
end

class OverheatingPump extends Pump ()
classifies "<ast:Overheating>";
    Unit printInfo()
        print("Pump: " ++ this.pumpId ++ " is overheating.");
    end
end

class UnderheatingPump extends Pump ()
classifies "<ast:Underheating>";
    Unit printInfo()
        print("Pump: " ++ this.pumpId ++ " is underheating.");
    end
end


// NDVI START
/* Models the health state of a plant via NDVI */
class HealthState extends Twin (String name, Double minNdvi, Double maxNdvi) end
// NDVI END

/* The following classes are used to store results of CONSTRUCT queries */
class PumpDefect (Pump obj, Int pumpGpioPinNew) end
class PumpDefectWater (Pump obj, Double temperatureNew) end
class OperatingPumpDefectWater (OperatingPump obj, Double temperatureNew) end
class MaintenancePumpDefectWater (MaintenancePump obj, Double temperatureNew) end
class OverheatingPumpDefectWater (OverheatingPump obj, Double temperatureNew) end
class UnderheatingPumpDefectWater (UnderheatingPump obj, Double temperatureNew) end
class PumpDefectLifeTime (Pump obj, Int pumpLifeTimeNew) end
class OperatingPumpDefectLifeTime (OperatingPump obj, Int pumpLifeTimeNew) end
class MaintenancePumpDefectLifeTime (MaintenancePump obj, Int pumpLifeTimeNew) end
class OverheatingPumpDefectLifeTime (OverheatingPump obj, Int pumpLifeTimeNew) end
class UnderheatingPumpDefectLifeTime (UnderheatingPump obj, Int pumpLifeTimeNew) end
class PlantDefect (Plant obj, Double idealMoistureNew) end
class PlantDefectStatus (Plant obj, String, statusNew) end
class PotDefectShelf (Pot obj, String shelfFloorNew) end
class PotDefectPosition (Pot obj, String potPositionNew) end
class PotDefectPump (Pot obj, String pumpIdNew) end
class PotDefectPlant (Pot obj, String plantIdNew) end

/*
 *  The follow class is used to store results that are read from the simulation driver.
 *  Every instance is representing on decision to water a specific plant and pump.
 */
class Decision (String plantId, Int pumpGpioPin, String pumpId) end